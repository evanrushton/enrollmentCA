demo()
y1 = readcsv(file.choose(), header=T)
y1 = read.csv(file.choose(), header=T)
y1
attach(y1)
boxplot(x~R.N)
by(x,R.O,mean)
boxplot(y~R.N)
boxplot(y1~R.N)
boxplot(y1$Ave.Score)
detach(y1)
y2 = read.csv(file.choose(), header=T)
attach(y2)
boxplot(y2$ROU - y2$NIF)
y2
y1
attach(y1)
boxplot(y1$Ave.Score - y1$R.N)
min(x)
boxplot(y1$Ave.Score ~ y1$R.N)
boxplot(y1$Ave.Score ~ y1$R.N, y1$O.I)
boxplot(y1$Ave.Score ~ (y1$R.N, y1$O.I)
boxplot(y1$Ave.Score ~ (y1$R.N, y1$O.I))
boxplot(y1$Ave.Score ~ y1$R.N ~y1$O.I)
boxplot(y1)
boxplot(y1$Ave.Score ~y1$R.N, y1$Ave.Score ~y1$O.I)
boxplot(y1$Ave.Score[R.N == "R"], y1$Ave.Score[R.N == "N"])
boxplot(y1$Ave.Score[R.N == "R"], y1$Ave.Score[R.N == "N"], y1$Ave.Score[O.I == "O"], y1$Ave.Score[O.I == "I"], y1$Ave.Score[U.F == "U"], y1$Ave.Score[U.F == "F"])
?boxplot
names(y1)
boxplot(y1$Ave.Score[R.N == "R"], y1$Ave.Score[R.N == "N"], y1$Ave.Score[O.I == "O"], y1$Ave.Score[O.I == "I"], y1$Ave.Score[U.F == "U"], y1$Ave.Score[U.F == "F"])
boxplot(y1$Ave.Score[R.N == "R"], y1$Ave.Score[R.N == "N"], y1$Ave.Score[O.I == "O"], y1$Ave.Score[O.I == "I"], y1$Ave.Score[U.F == "U"], y1$Ave.Score[U.F == "F"], names("R","N","O","I","U","F"))
?boxplot
boxplot(y1$Ave.Score[R.N == "R" && O.I == "I"])
?boxplot
boxplot(y1$Ave.Score[R.N == "R"], y1$Ave.Score[R.N == "N"], y1$Ave.Score[O.I == "O"], y1$Ave.Score[O.I == "I"], y1$Ave.Score[U.F == "U"], y1$Ave.Score[U.F == "F"])
detach(y1)
y1 = read.csv(file.choose(), header=T)
attach(y1)
inference(data = y1$Ave.Score, group = y1$R.N, est = "mean", type ="ht", alternative = "greater", method = "theoretical" )
boxplot(y1$Ave.Score[R.N == "R"], y1$Ave.Score[R.N == "N"], y1$Ave.Score[O.I == "O"], y1$Ave.Score[O.I == "I"], y1$Ave.Score[U.F == "U"], y1$Ave.Score[U.F == "F"])
boxplot(y1$Ave.Score[Label Recognition == "R"], y1$Ave.Score[Label Recognition == "N"], y1$Ave.Score[Item Representation == "O"], y1$Ave.Score[Item Representation == "I"], y1$Ave.Score[Item Familiarity == "U"], y1$Ave.Score[Item Familiarity == "F"])
y1
boxplot(y1$Ave.Score[Label.Recognition == "R"], y1$Ave.Score[Label.Recognition == "N"], y1$Ave.Score[Item.Representation == "O"], y1$Ave.Score[Item.Representation == "I"], y1$Ave.Score[Item.Familiarity == "U"], y1$Ave.Score[Item.Familiarity == "F"])
boxplot(y1$Ave.Score[Label.Recognition == "R"] name = "R", y1$Ave.Score[Label.Recognition == "N"], y1$Ave.Score[Item.Representation == "O"], y1$Ave.Score[Item.Representation == "I"], y1$Ave.Score[Item.Familiarity == "U"], y1$Ave.Score[Item.Familiarity == "F"])
y2
boxplot(y2)
boxplot(y2, lif=2)
boxplot(y2, las=2)
with(y1, boxplot(Ave.Score ~ Item.Familiarity + Item.Representation + Label.Recognition)
with(y1, boxplot(Ave.Score ~ Item.Familiarity + Item.Representation + Label.Recognition)
with(y1, boxplot(Ave.Score ~ Item.Familiarity + Item.Representation + Label.Recognition)
with(y1, boxplot(Ave.Score ~ Item.Familiarity + Item.Representation + Label.Recognition)
boxplot(y1$Ave.Score ~ y1$Item.Familiarity + y1$Item.Representation + y1$Label.Recognition)
boxplot(y1$Ave.Score ~ y1$Item.Familiarity + y1$Item.Representation + y1$Label.Recognition, las=2)
detach(y1)
detach(y2)
attach(y1)
boxplot(y1$Ave.Score ~ y1$Item.Familiarity + y1$Item.Representation + y1$Label.Recognition, las=2)
y1
boxplot(y2, lif=2)
boxplot(y2, las=2)
boxplot(y1$Ave.Score ~ y1$Label.Recognition + y1$Item.Representation + y1$Item.Familiarity, las=2)
y = read.csv(file.choose(), header="T")
y = read.csv(file.choose(), header=T)
y
boxplot(y)
clear
clearConsole()
clear()
?
help
help()
items = read.csv(file.choose(), header=T)
boxplot(items)
boxplot(items, laf=2)
boxplot(items, lfa=2)
boxplot(items, las=2)
y = read.csv(file.choose(), header=T)
boxplot(y, main="Individual Item Recall Score Distributions", xlab="Item ID", ylab="Recall Score", las =2)
boxplot(y, main="Individual Item Recall Score Distributions", xlab="Item ID", ylab="Recall Score")
y = read.csv(file.choose(), header=T)
boxplot(y, main="Individual Item Recall Score Distributions", xlab="Item ID", ylab="Recall Score")
boxplot(y, main="Individual Item Recall Score Distributions", xlab="Item ID", ylab="Recall Score", las =2)
y = read.csv(file.choose(), header=T)
boxplot(y, main="Individual Item Recall Score Distributions", xlab="Item ID", ylab="Recall Score", las =2)
y
y = read.csv(file.choose(), header=T)
boxplot(y, main="Individual Item Recall Score Distributions", xlab="Item ID", ylab="Recall Score", las =2)
rec = read.csv(file.choose(), header=T)
boxplot(rec$Score ~ rec$Type)
boxplot(rec$Score ~ rec$Type, main="Participant Average Recall Score by Label Recognition, xlab="Condition"", ylab="Recall Score")
boxplot(rec$Score ~ rec$Type, main="Participant Average Recall Score by Label Recognition", xlab="Condition, ylab="Recall Score")
boxplot(rec$Score ~ rec$Type, main="Participant Average Recall Score by Label Recognition", xlab="Condition, ylab="Recall Score")
boxplot(rec$Score ~ rec$Type, main="Participant Average Recall Score by Label Recognition", xlab="Condition", ylab="Recall Score")
rec1.aov <- aov(rec$Score ~ rec$Type)
summary(rec1.aov)
TukeyHSD(rec1.aov)
rep = read.csv(file.choose(), header=T)
boxplot(rep$Score ~ rep$Type, main="Participant Average Recall Score by Item Representation", xlab="Condition", ylab="Recall Score")
rep1.aov <- aov(rep$Score ~ rep$Type)
summary(rep1.aov)
summary(rec1.aov)
TukeyHSD(rep1.aov)
fam = read.csv(file.choose(), header=T)
boxplot(fam$Score ~ fam$Type, main="Participant Average Recall Score by Item Familiarity", xlab="Condition", ylab="Recall Score")
fam1.aov <- aov(fam$Score ~ fam$Type)
summary(fam1.aov)
TukeyHSD(fam1.aov)
recRep = read.csv(file.choose(), header=T)
boxplot(recRep$Score ~ recRep$Type, main="Participant Average Recall Score by Label Recognition | Item Representation", xlab="Condition", ylab="Recall Score")
recRep1.aov <- aov(recRep$Score ~ recRep$Type)
summary(recRep1.aov)
TukeyHSD(recRep1.aov)
boxplot(recRep$Score ~ recRep$Type, main="Label Recognition | Item Representation", xlab="Condition", ylab="Recall Score")
labRec = read.csv(file.choose(), header=T)
recFam = read.csv(file.choose(), header=T)
boxplot(recFam$Score ~ recFam$Type, main="Label Recognition | Item Familiarity", xlab="Condition", ylab="Recall Score")
recFam1.aov <- aov(recFam$Score ~ recFam$Type)
summary(recFam1.aov)
TukeyHSD(recFam1.aov)
repFam = read.csv(file.choose(), header=T)
boxplot(repFam$Score ~ repFam$Type, main="Item Representation | Item Familiarity", xlab="Condition", ylab="Recall Score")
repFam = read.csv(file.choose(), header=T)
boxplot(repFam$Score ~ repFam$Type, main="Item Representation | Item Familiarity", xlab="Condition", ylab="Recall Score")
repFam1.aov <- aov(repFam$Score ~ repFam$Type)
summary(repFam1.aov)
TukeyHSD(repFam1.aov)
recFam = read.csv(file.choose(), header=T)
boxplot(recFam$Score ~ recFam$Type, main="Label Recognition | Item Familiarity", xlab="Condition", ylab="Recall Score")
repFam = read.csv(file.choose(), header=T)
boxplot(repFam$Score ~ repFam$Type, main="Item Representation | Item Familiarity", xlab="Condition", ylab="Recall Score")
repFam1.aov <- aov(repFam$Score ~ repFam$Type)
summary(repFam1.aov)
TukeyHSD(repFam1.aov)
recRepFam = read.csv(file.choose(), header=T)
boxplot(recRepFam$Score ~ recRepFam$Type, main="Label Recognition | Item Representation | Item Familiarity", xlab="Condition", ylab="Recall Score")
recRepFam1.aov <- aov(recRepFam$Score ~ recRepFam$Type)
summary(recRepFam1.aov)
TukeyHFD(recRepFam1.aov)
TukeyHSD(recRepFam1.aov)
qgsa = read.csv(file.choose(), header=T)
boxplot(qgsa$score ~ qgsa$quad, main="Quadrant", xlab="Condition", ylab="Recall Score")
quad1.aov <- aov(qgsa$Score ~ qgsa$quad)
quad1.aov <- aov(qgsa$score ~ qgsa$quad)
summary(quad1.aov)
TukeyHSD(quad1.aov)
boxplot(qgsa$score ~ qgsa$gender, main="Gender", xlab="Condition", ylab="Recall Score")
gen.aov <- aov(qgsa$score ~ qgsa$gender)
summary(gen.aov)
TukeyHSD(gen.aov)
plot(qgsa ~ gender, data = score)
plot(qgsa ~gender)
plot(qgsa$score ~ qgsa$gender)
t.test(qgsa$score ~ qgsa$gender)
boxplot(qgsa$score ~ qgsa$study, main="Field of Study", xlab="Condition", ylab="Recall Score")
study.aov <- aov(qgsa$score ~ qgsa$study)
summary(study.aov)
TukeyHSD(study.aov)
boxplot(qgsa$score ~ qgsa$age, main="Age", xlab="Condition", ylab="Recall Score")
age.aov <- aov(qgsa$score ~ qgsa$age)
summary(age.aov)
TukeyHSD(age.aov)
qgsa
install.packages("plyr")
install.packages("lattice")
install.packages("sm")
library(lattice)
library(sm)
library(plyr)
attmpt <- read.table("/Users/ERushton/Downloads/attempts.csv", header=TRUE,
sep=",", as.is = TRUE)
head(attmpt)
densityplot(~attmpt$X1.06,
main="Density Plot",
xlab="Max Attempts - X3.04b")
count(attmpt, 'attmpt$X3.04b')
densityplot(~attmpt$X3.04b,
main="Density Plot",
xlab="Max Attempts - X3.04b")
densityplot(~attmpt$X3.02b,
main="Density Plot",
xlab="Max Attempts - X3.02b")
count(attmpt, 'attmpt$X3.02b')
densityplot(~attmpt$X3.04d,
main="Density Plot",
xlab="Max Attempts - X3.04d")
count(attmpt, 'attmpt$X3.04d')
densityplot(~attmpt$X2.05a,
main="Density Plot",
xlab="Max Attempts - X2.05a")
count(attmpt, 'attmpt$X2.05a')
densityplot(~attmpt$X2.06b,
main="Density Plot",
xlab="Max Attempts - X2.06b")
count(attmpt, 'attmpt$X2.06b')
densityplot(~attmpt$X3.03a,
main="Density Plot",
xlab="Max Attempts - X3.03a")
count(attmpt, 'attmpt$X3.03a')
densityplot(~attmpt$X3.02b,
main="Density Plot",
xlab="Max Attempts - X3.02b")
count(attmpt, 'attmpt$X3.02b')
densityplot(~attmpt$X3.01a,
main="Density Plot",
xlab="Max Attempts - X3.01a")
count(attmpt, 'attmpt$X3.01a')
densityplot(~attmpt$X3.01c,
main="Density Plot",
xlab="Max Attempts - X3.01c")
count(attmpt, 'attmpt$X3.01c')
densityplot(~attmpt$(X3.01c, X3.01a),
main="Density Plot",
xlab="Max Attempts - X3.01c @ X3.01a")
densityplot(~attmpt$X3.01c,
main="Density Plot",
xlab="Max Attempts - X3.01c")
n1 <- read.table("/Users/ERushton/Downloads/prnames.csv", header=TRUE,
sep=",", as.is = TRUE)
head(n1)
n2 <- read.table("/Users/ERushton/Downloads/ponames.csv", header=TRUE,
sep=",", as.is = TRUE)
head(n2)
#Describe the location of matches in the 'name' field of both lists
paired <- match(n1$name,n2$name)
list(paired)
#Create a vector of names unique to n1
unique <- setdiff(n1$name,n2$name)
head(unique)
#Create a vector of names unique to n2
unique <- setdiff(n2$name,n1$name)
head(unique)
n1 <- read.table("/Users/ERushton/Downloads/prnames.csv", header=TRUE,
sep=",", as.is = TRUE)
n2 <- read.table("/Users/ERushton/Downloads/ponames.csv", header=TRUE,
sep=",", as.is = TRUE)
paired <- match(n1$name,n2$name)
list(paired)
unique <- setdiff(n1$name,n2$name)
list(unique)
?runif
?plot()
plot(x,y)
y
x<-runif(10,-1,1)
x<-runif(10,-1,1)
y<-runif(10,-1,1)
plot(x,y)
x<-runif(10,-1,1)
y<-runif(10,-1,1)
plot(x,y)
x<-runif(10,-1,1)
y<-runif(10,-1,1)
plot(x,y)
# Sample Data X
N=10
x<-runif(N,-1,1)
y<-runif(N,-1,1)
# Target Function f
# Plot
plot(x,y)
# Sample Data X
N=10
x<-runif(N,-1,1)
y<-runif(N,-1,1)
l<-(runif(1,-1,1), runif(1,-1,1))
# Plot
plot(x,y)
plot(l, type="i")
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
# Plot
plot(x,y)
lines(runif(1,-1,1), runif(1,-1,1), type="l")
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
x1<-runif(1,-1,1); y1<-runif(1,-1,1)
# Plot
plot(x,y)
lines(x1,y1,type="l")
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline[1],yline[1],xline[2], yline[2],type="l")
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline[1],yline[1],xline[2], yline[2],type="l")
print(xline[1])
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline[1],yline[1],xline[2], yline[2],type="l")
print(xline[1], xline[2])
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline[1],yline[1],xline[2], yline[2],type="l")
print(xline[0], xline[1])
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline,yline,type="l")
print(xline, yline)
help print
h print
help(print)
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline,yline,type="l")
print(x)
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline,yline,type="l")
print(xline); print(yline)
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline,yline,type="l")
print(xline); print(yline)
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
lines(xline,yline,type="l")
print(xline); print(yline)
help(curve)
# Sample Data X
N=10; x<-runif(N,-1,1); y<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x,y)
curve(y-yline[1] = ((yline[2]-yline[1])/(xline[2]-xline[1]))(x - xline[1]),
from = -1,to = 1, add=TRUE)
help(curve)
# Sample Data X
N=10; x1<-runif(N,-1,1); y1<-runif(N,-1,1)
xline<-runif(2,-1,1); yline<-runif(2,-1,1)
# Plot
plot(x1,y1)
curve(y-yline[1] = ((yline[2]-yline[1])/(xline[2]-xline[1]))(x - xline[1]),
from = -1, to = 1, add=TRUE)
mywd
setwd
getwd
getwd()
cd ./practice-R-code/kaggle
cd practice-R-code
setwd(./practice-R-code/kaggle)
setwd(practice-R-code)
setwd(/Users/ERushton/practice-R-code/kaggle)
setwd(Users/ERushton/practice-R-code/kaggle)
getwd()
setwd("Users/ERushton/practice-R-code/kaggle")
# Load ggplot2 and readr libraries
library(ggplot2) # For data visualization
library(readr) # For CSV file I/O
# Load an enrollment dataset as a test
2015 <- read_table('./Data/2014-2015.txt')
head(2015)
# What are the dimensions of this data frame?
matrix( c('Rows', 'Cols', dim(df) ), nrow = 2, ncol = 2)
# Let's check for NA values
sum(is.na(df))
# Load ggplot2 and readr libraries
library(ggplot2) # For data visualization
library(readr) # For CSV file I/O
# Load an enrollment dataset as a test
en2015 <- read_table('./Data/2014-2015.txt')
head(en2015)
# What are the dimensions of this data frame?
matrix( c('Rows', 'Cols', dim(en2015) ), nrow = 2, ncol = 2)
# Let's check for NA values
sum(is.na(en2015))
pwd
getwd()
setwd(./practice-R-code/enrollmentCA/Data
)
setwd(Users/ERushton/practice-R-code/enrollmentCA/Data)
setwd('./practice-R-code/enrollmentCA/Data')
ls
getwd()
# Load ggplot2 and readr libraries
library(ggplot2) # For data visualization
library(readr) # For CSV file I/O
# Load an enrollment dataset as a test
en2015 <- read_table('./2014-2015.txt')
head(en2015)
# What are the dimensions of this data frame?
matrix( c('Rows', 'Cols', dim(en2015) ), nrow = 2, ncol = 2)
# Let's check for NA values
sum(is.na(en2015))
install.packages("readr")
install.packages('devtools')
library(devtools)
install_github('andreacirilloac/updateR')
library(updateR)
